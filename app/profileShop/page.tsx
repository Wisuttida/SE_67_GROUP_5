"use client";

import Navbar from '@/components/Navbar';
import SideBarShop from '@/components/SideBarShop';
import axios from 'axios';
import { useState, useEffect } from 'react';

interface AddressInfo {
  ‡∏ä‡∏∑‡πà‡∏≠: string;
  ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•: string;
  ‡πÄ‡∏ö‡∏≠‡∏£‡πå: string;
  ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà: string;
  ‡∏ñ‡∏ô‡∏ô: string;
  ‡∏ï‡∏≥‡∏ö‡∏•: string;
  ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠: string;
  ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î: string;
  ‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå: string;
  position_id: string;
  address_id: string;
}

interface BankInfo {
  ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£: string;
  ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: string;
  ‡∏ä‡∏∑‡πà‡∏≠: string;
}

const ProfileShop = () => {
  let csrf = localStorage.getItem('csrfToken');
  let token = localStorage.getItem('token');
  const [isAddressEditing, setIsAddressEditing] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [isDescriptionEditing, setIsDescriptionEditing] = useState(false);

  // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const [tempAddressInfo, setTempAddressInfo] = useState<AddressInfo | null>(null);
  const [tempDescription, setTempDescription] = useState('');
  const [tempBankInfo, setTempBankInfo] = useState<BankInfo | null>(null);

  const [addressInfo, setAddressInfo] = useState<AddressInfo>({
    position_id: '',
    address_id: '',
    ‡∏ä‡∏∑‡πà‡∏≠: '',
    ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•: '',
    ‡πÄ‡∏ö‡∏≠‡∏£‡πå: '',
    ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà: '',
    ‡∏ñ‡∏ô‡∏ô: '',
    ‡∏ï‡∏≥‡∏ö‡∏•: '',
    ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠: '',
    ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î: '',
    ‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå: '',
  });
  const [multiaddressInfo, setMultiAddressInfo] = useState<AddressInfo[]>([{
    position_id: '',
    address_id: '',
    ‡∏ä‡∏∑‡πà‡∏≠: '',
    ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•: '',
    ‡πÄ‡∏ö‡∏≠‡∏£‡πå: '',
    ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà: '',
    ‡∏ñ‡∏ô‡∏ô: '',
    ‡∏ï‡∏≥‡∏ö‡∏•: '',
    ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠: '',
    ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î: '',
    ‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå: '',
  }]);

  const [description, setDescription] = useState('');
  const [bankInfo, setBankInfo] = useState<BankInfo>({
    ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£: '',
    ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: '',
    ‡∏ä‡∏∑‡πà‡∏≠: '',
  });

  // ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
   const handleEditAddress = () => {
    setTempAddressInfo({ ...addressInfo });
    setIsAddressEditing(true);
  };

  const handleEditDescription = () => {
    setTempDescription(description);
    setIsDescriptionEditing(true);
  };

  const handleEditBankInfo = () => {
    setTempBankInfo({ ...bankInfo });
    setIsEditing(true);
  };

  // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö)
  const handleCancelAddressEdit = () => {
    if (tempAddressInfo) {
      setAddressInfo(tempAddressInfo);
    }
    setIsAddressEditing(false);
  };

  const handleCancelDescriptionEdit = () => {
    setDescription(tempDescription);
    setIsDescriptionEditing(false);
  };

  const handleCancelBankEdit = () => {
    if (tempBankInfo) {
      setBankInfo(tempBankInfo); // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    }
    setIsEditing(false); // ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  };
  

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setBankInfo((prev) => ({ ...prev, [name]: value }));
  };

  const handleSave = () => {
    console.log('Bank Info Saved:', bankInfo);
    setIsEditing(false);
  };

  const handleDescriptionSave = () => {
    console.log('Description Saved:', description);
    setIsDescriptionEditing(false);
  };

  const handleAddressChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setAddressInfo((prev) => ({ ...prev, [name]: value }));
  };

  const handleAddressSave = () => {
    console.log('Address Saved:', addressInfo);
    setIsAddressEditing(false);
    axios.put(`${process.env.NEXT_PUBLIC_API_URL}/addresses/${addressInfo.address_id}`,
      {
        fname : addressInfo.‡∏ä‡∏∑‡πà‡∏≠,
        lname : addressInfo.‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•,
        phonenumber : addressInfo.‡πÄ‡∏ö‡∏≠‡∏£‡πå,
        street_name : addressInfo.‡∏ñ‡∏ô‡∏ô,
        house_number : addressInfo.‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà,
        province : addressInfo.‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î,
        amphoe : addressInfo.‡∏≠‡∏≥‡πÄ‡∏†‡∏≠,
        tambon : addressInfo.‡∏ï‡∏≥‡∏ö‡∏•,
        zipcode : addressInfo.‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå,
      },
      {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
          'X-Requested-With': 'XMLHttpRequest',
          'X-CSRF-TOKEN': csrf,
        },
        withCredentials: true,
      }
    ).catch(error => {
      console.error('Error saving address:', error.response ? error.response.data : error.message);
    });
    axios.get(`${process.env.NEXT_PUBLIC_API_URL}/addresses`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest',
        'X-CSRF-TOKEN': csrf,
      },
      withCredentials: true,
    })
    .then(res => {
      localStorage.setItem('addresses', JSON.stringify(res.data.data));
    })
    .catch(error => {
      console.error("Error fetching address:", error);
    });
  };

  interface ShopData {
    shop_id: number;
    shop_name: string;
    shop_image: string | null;
    description: string | null;
    accepts_custom: number;
    bank_name: string;
    bank_account: string;
    bank_number: string;
    addresses_address_id: string | null;
  }
  const [shop_data, setShopData] = useState<ShopData | undefined>(undefined);
  useEffect(() => {
    const shop_dataGet = localStorage.getItem('shop');
    if (shop_dataGet) {
      try {
        const data: ShopData = JSON.parse(shop_dataGet);
        setShopData(data);
        setBankInfo(prevState => ({
          ...prevState,
          ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£: data.bank_name,
          ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: data.bank_number,
          ‡∏ä‡∏∑‡πà‡∏≠: data.bank_account,
        }));
        if (data.description) {
          setDescription(data.description);
        } else {
          setDescription(''); // Set to an empty string or any default value you prefer
        }
      } catch (error) {
        console.error('Error parsing shop data from localStorage:', error);
      }
    }
    const addressGet = localStorage.getItem('addresses');
    if (addressGet) {
      try {
        const data: AddressInfo[] = JSON.parse(addressGet);
        const filteredAddresses: AddressInfo[] = data.filter(address => address.position_id === 2);
        setAddressInfo(prevState => ({
          ...prevState,
          ‡∏ä‡∏∑‡πà‡∏≠: filteredAddresses[0].fname,
          ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•: filteredAddresses[0].lname,
          ‡πÄ‡∏ö‡∏≠‡∏£‡πå: filteredAddresses[0].phonenumber,
          ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà: filteredAddresses[0].house_number,
          ‡∏ñ‡∏ô‡∏ô: filteredAddresses[0].street_name,
          ‡∏ï‡∏≥‡∏ö‡∏•: filteredAddresses[0].tambon,
          ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠: filteredAddresses[0].amphoe,
          ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î: filteredAddresses[0].province,
          ‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå: filteredAddresses[0].zipcode,
          address_id: filteredAddresses[0].address_id,
          position_id: filteredAddresses[0].position_id,
        }));
      } catch (error) {
        console.error('Error parsing shop data from localStorage:', error);
      }
    }
  }, []);
  
  return (
    <div className="min-h-screen bg-gray-100">
      <Navbar />

      {/* ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Flexbox Layout */}
      <div className="flex">
        {/* Sidebar */}
        <div className="w-64 bg-gray-300 text-white p-6">
          <SideBarShop />
        </div>

        {/* Content */}
        <div className="flex-1 max-w-screen-xl mx-auto px-4 py-6">
          {/* ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏£‡πâ‡∏≤‡∏ô */}
          <div className="bg-white p-6 rounded-2xl shadow-lg mt-6">
            <h3 className="text-xl font-semibold mb-4">üìç ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏£‡πâ‡∏≤‡∏ô</h3>
            <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
              {Object.entries(addressInfo).filter(([key]) => key !== 'position_id' && key !== 'address_id').map(([key, value]) => (
                <div key={key} className="border-b pb-1 capitalize">
                  {key.replace(/([A-Z])/g, ' $1')}: {value || '-'}
                </div>
              ))}
            </div>
            <button onClick={handleEditAddress} className="text-blue-500 mt-4">‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</button>
          </div>

          {isAddressEditing && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center">
              <div className="bg-white p-8 rounded-2xl shadow-xl w-96">
                <h2 className="text-2xl font-semibold mb-6">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</h2>
                <div className="grid grid-cols-2 gap-4">
                  {Object.entries(addressInfo).filter(([key]) => key !== 'position_id' && key !== 'address_id').map(([key, value]) => (
                    <div key={key}>
                      <label className="block mb-1">{key.replace(/([A-Z])/g, ' $1')}</label>
                      <input
                        name={key}
                        value={value}
                        onChange={handleAddressChange}
                        className="border p-2 rounded-lg w-full"
                      />
                    </div>
                  ))}
                </div>
                <div className="flex justify-end mt-6 space-x-4">
                  <button onClick={handleCancelAddressEdit} className="bg-gray-300 px-4 py-2 rounded-lg">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                  <button onClick={handleAddressSave} className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
                </div>
              </div>
            </div>
          )}

          {/* ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡πâ‡∏≤‡∏ô */}
          <div className="bg-white p-6 rounded-2xl shadow-lg mt-6">
            <h3 className="text-xl font-semibold mb-4">üìã ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡πâ‡∏≤‡∏ô</h3>
            {isDescriptionEditing ? (
              <div>
                <textarea
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  className="w-full p-4 border rounded-lg"
                  placeholder="‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡πâ‡∏≤‡∏ô"
                />
                <div className="flex justify-end mt-4 space-x-4">
                  <button onClick={handleCancelDescriptionEdit} className="bg-gray-300 px-4 py-2 rounded-lg">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                  <button onClick={handleDescriptionSave} className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
                </div>
              </div>
            ) : (
              <p>{description || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢'}</p>
            )}
            {!isDescriptionEditing && (
              <button onClick={handleEditDescription} className="text-blue-500 mt-4">‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢</button>
            )}
          </div>

          {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£ */}
          <div className="bg-white p-6 rounded-2xl shadow-lg mt-6">
            <h3 className="text-xl font-semibold mb-4">üè¶ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</h3>
            {isEditing ? (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {Object.entries(bankInfo).map(([key, value]) => (
                  <div key={key}>
                    <label className="block mb-1">{key.replace(/([A-Z])/g, ' $1')}</label>
                    <input
                      name={key}
                      value={value}
                      onChange={handleChange}
                      className="p-2 border rounded-lg w-full"
                      placeholder={key}
                    />
                  </div>
                ))}
                <div className="flex justify-end mt-4 space-x-4">
                  <button onClick={handleCancelBankEdit} className="bg-gray-300 px-4 py-2 rounded-lg">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                  <button onClick={handleSave} className="bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
                </div>
              </div>
            ) : (
              <div>
                {Object.entries(bankInfo).map(([key, value]) => (
                  <p key={key}>{key.replace(/([A-Z])/g, ' $1')}: {value || '-'}</p>
                ))}
                <button onClick={handleEditBankInfo} className="text-blue-500 mt-4">‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£</button>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProfileShop;
